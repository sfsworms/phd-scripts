mergedSet <- mergedSet %>%
mutate(enrichment_ara = log2(Gen_5_ara_ratio/Gen_1_ratio)) %>%
mutate(enrichment_glu = log2(Gen_5_glu_ratio/Gen_1_ratio))
mergedSet$enrichment_ara %>% is.na() %>% sum())
mergedSet$enrichment_ara %>% is.na() %>% sum()
mergedSet$Gen_1_ratio %>% min()
mergedSet$Gen_1_ratio %>% max()
#How many peptides don't have any zeroes?
x <- list()
mergedSet[1]
#How many peptides don't have any zeroes?
x <- list()
for (i in seq_along(nrow(mergedSet))){
y = FALSE
for (j in seq_along(ncol(mergedSet))){
if (mergedSet[j][i] = 0){
j = 1
mergedSet[j][i]
mergedSet[j][[i]]
mergedSet[1]
mergedSet[[1]]
mergedSet[[1]][2]
#How many peptides don't have any zeroes?
x <- list()
for (i in seq_along(nrow(mergedSet))){
y = FALSE
for (j in seq_along(ncol(mergedSet))){
if (mergedSet[[j]][i] = 0){
#How many peptides don't have any zeroes?
x <- list()
for (i in seq_along(nrow(mergedSet))){
y = FALSE
for (j in seq_along(ncol(mergedSet))){
if (mergedSet[[j]][i] == 0){
y = TRUE
}
x <- append(x, y)
}
}
?append
for (i in seq_along(nrow(mergedSet))){
y <- 3
x <- append(x, y)
}
nrow(mergedSet)
nrow(mergedSet) %>% seq_along
?seq_along
seq_along(5)
seq(5)
seq_along(5)
seq_len(5)
#How many peptides don't have any zeroes?
x <- list()
for (i in seq(nrow(mergedSet))){
y = FALSE
for (j in seq(ncol(mergedSet))){
if (mergedSet[[j]][i] == 0){
y = TRUE
}
x <- append(x, y)
}
}
seq_along(mergedSet)
nRow <- seq(nrow(mergedSet))
nCol <-  seq(ncol(mergedSet))
mergedSet[8:10]
nCol <-  8:10
#How many peptides don't have any zeroes?
x <- list()
for (i in nRow){
y = FALSE
for (j in nCol){
if (mergedSet[[j]][i] == 0){
y = TRUE
}
x <- append(x, y)
print(i)
}
}
x
sum(x)
321696/107232
mergedSet %>%
select(8:10)
hasZeroes <- mergedSet %>%
select(8:10) %>%
rowSums()
hasZeroes <- mergedSet %>%
select(8:10) %>%
rowSums(mergedSet == 0)
rm(hasZeroes)
hasZeroes <- mergedSet %>%
select(8:10) %>%
rowSums(mergedSet == 0)
df <- read.table(text="Column1 Column2 Column3 Column4
.03 .05 .07 .08
0 .09 .22 .39
0 .56 .88 .56", header=TRUE, stringsAsFactors=FALSE)
colSums(df == O)
colSums(df == 0)
df
rowSums(df == 0)
?rowSums
library(tidyverse)  #Needed for data wrangling
library(DESeq2)  #Use for differential expression
directory = choose.dir()
fileList <- list.files(directory)
fileList <- fileList[grepl("Gen", fileList)]
varNames <- fileList %>%
gsub("Cytoplasmic-NNK-", "", .) %>%
gsub("_001_peptide3_count.csv", "", .) %>%
gsub("-", "_", .)
for (i in seq_along(fileList)) {
counts = read.csv(file.path(directory, fileList[i]), header = FALSE)
colnames(counts) = c("seq", "count")
assign(varNames[i], counts)
}
rm(counts)
## Merge by peptide to form one big dataset.
mergedSet = get(varNames[1])
for (i in 2:length(fileList)) {
mergedSet = full_join(mergedSet, get(varNames[i]), by = "seq")
}
columnNames = c("seq", varNames)
colnames(mergedSet) = columnNames
# Replace all NAs by 0
mergedSet <- mergedSet %>%
mutate_at(c(2:ncol(mergedSet)),
~replace_na(.,0))
rm(list = varNames)
# Clean the mergedSet from stop codons. As of jan 23, I'm not doing that
# dropThose = mergedSet$seq %>% grepl('\\*' , . )
# mergedSet <- mergedSet[!dropThose,]
## Compute sum of counts for each condition and then compute ratios
mergedSet <- mergedSet %>%
mutate(Gen_1_sum = Gen_1_LB_R1 + Gen_1_LB_R2) %>%
mutate(Gen_5_Ara_sum = Gen_5_Ara_R1 + Gen_5_Ara_R2) %>%
mutate(Gen_5_Glu_sum = Gen_5_Glu_R1 + Gen_5_Glu_R2)
Gen1_read_total <- sum(mergedSet$Gen_1_sum)
Gen5_ara_total <- sum(mergedSet$Gen_5_Ara_sum)
Gen5_glu_total <- sum(mergedSet$Gen_5_Glu_sum)
mergedSet <- mergedSet %>%
mutate(Gen_1_ratio = Gen_1_sum / Gen1_read_total) %>%
mutate(Gen_5_ara_ratio = Gen_5_Ara_sum / Gen5_ara_total) %>%
mutate(Gen_5_glu_ratio = Gen_5_Glu_sum / Gen5_glu_total)
## Compute enrichment ratio by comparing with Gen 1
mergedSet <- mergedSet %>%
mutate(enrichment_ara = log2(Gen_5_ara_ratio/Gen_1_ratio)) %>%
mutate(enrichment_glu = log2(Gen_5_glu_ratio/Gen_1_ratio))
View(mergedSet)
gc()
rowSums(mergedSet == 0) %>% head(x = )
rowSums(mergedSet == 0)
rowSums(mergedSet == 0) %>% sum()
?sum
x <- rowSums(mergedSet == 0)
class(x)
sum(x)
sum(x[1:1000])
sum(x[1:10000])
sum(x[1:100000])
sum(x[1:50000])
sum(x[1:60000])
sum(x[1:70000])
sum(x[1:80000])
sum(x[70000:80000])
sum(x[70000:75000])
sum(x[70000:76000])
sum(x[70000:77000])
sum(x[70000:78000])
sum(x[70000:79000])
sum(x[79000:80000])
sum(x[79000:79600])
x[79000:79600]
w %>% tail()
x %>% tail()
mergedSet[79000:79300]
mergedSet[,79000:79300]
mergedSet[79000:79300,]
mergedSet[79150:79300,]
hasZeroes <- mergedSet %>%
select(8:10) %>%
rowSums(mergedSet == 0)
hasZeroes <- mergedSet %>%
select(8:10) %>%
rowSums(mergedSet == 0)
hasZeroes <- mergedSet %>%
select(8:10) %>%
rowSums(mergedSet == 0)
oriSet <- mergedSet %>%
select(8:10)
oriSet
x <- rowSums(oriSet == 0)
x
sum(x)
mergedSet[1:2]
mergedSet[,1:2]
mergedSet[1:2,]
oriSet <- mergedSet %>%
select(8:10)
x <- rowSums(oriSet == 0)
x
x %>% tail
filterSet <- mergedSet(!rowSums(oriSet == 0))
filterSet <- mergedSet[!rowSums(oriSet == 0)]
filterSet <- mergedSet[!rowSums(oriSet == 0),]
x <- rowSums(filterSet == 0)
x
sum(x)
tail(x)
"ara" %in% colnames(mergedSet)
colnames(mergedSet)
grep("ara", colnames(mergedSet))
grep("ara", colnames(mergedSet) %>% toupper())
grep("ARA", colnames(mergedSet) %>% toupper())
?select
li <- grep("ARA", colnames(mergedSet) %>% toupper())
mergedSetAra <- mergedSet %>%
select(li)
mergedSetAra <- mergedSet %>%
select(all_of(li))
mergedSetAra <- mergedSet %>%
select(none_of(li))
li <- grepl("ARA", colnames(mergedSet) %>% toupper())
mergedSetAra <- mergedSet %>%
select(li)
?drop
colnames(mergedSet) <- colnames(mergedSet) %>% tolower()
gc()
library(tidyverse)  #Needed for data wrangling
library(DESeq2)  #Use for differential expression
directory <- "C:/Users/worms/NGS Data/2022.06.07_drift_seq/90-666155004b/00_fastq/NNK/NNK3/counts_csv"
file_list <- list.files(directory)
file_list <- file_list[grepl("Gen", file_list)]
run_names <- file_list %>%
gsub("Cytoplasmic-NNK-", "", .) %>%
gsub("_001_peptide3_count.csv", "", .) %>%
gsub("-", "_", .)
for (i in seq_along(file_list)) {
counts = read.csv(file.path(directory, file_list[i]), header = FALSE)
colnames(counts) = c("seq", "count")
assign(run_names[i], counts)
}
for (i in seq_along(file_list)) {
read.csv(file.path(directory, file_list[i]), header = FALSE) %>%
colnames(.) = c("seq", "count") %>%
assign(run_names[i], .)
}
read.csv(file.path(directory, file_list[i]), header = FALSE)
read.csv(file.path(directory, file_list[i]), header = FALSE) %>% head()
for (i in seq_along(file_list)) {
read.csv(file.path(directory, file_list[i]), header = FALSE) %>%
setNames(., c("seq", "count")) %>%
assign(run_names[i], .)
}
directory <- "C:/Users/worms/NGS Data/2022.06.07_drift_seq/90-666155004b/00_fastq/NNK/NNK3/counts_csv"
#directory = choose.dir()
# Get the count data
file_list <- list.files(directory)
#Keep only the data csv
file_list <- file_list[grepl("Gen", file_list)]
run_names <- file_list %>%
gsub("Cytoplasmic-NNK-", "", .) %>%
gsub("_001_peptide3_count.csv", "", .) %>%
gsub("-", "_", .)
for (i in seq_along(file_list)) {
read.csv(file.path(directory, file_list[i]), header = FALSE) %>%
setNames(., c("seq", "count")) %>%
assign(run_names[i], .)
}
assign?
?assign
read.csv(file.path(directory, file_list[i]), header = FALSE) %>%
setNames(., c("seq", "count"))
read.csv(file.path(directory, file_list[i]), header = FALSE) %>%
setNames(., c("seq", "count")) %>% head()
read.csv(file.path(directory, file_list[i]), header = FALSE) %>%
setNames(., c("seq", "count")) %>% head() %>% assign("x",.)
for (i in seq_along(file_list)) {
assign(run_names[i],
read.csv(file.path(directory, file_list[i]), header = FALSE) %>%
setNames(., c("seq", "count"))
)
}
merged_set = get(run_names[1])
for (i in 2:length(file_list)) {
merged_set = full_join(merged_set, get(run_names[i]), by = "seq")
}
file_list <- file_list[grepl("Gen", file_list)]
run_names <- file_list %>%
gsub("Cytoplasmic-NNK-", "", .) %>%
gsub("_001_peptide3_count.csv", "", .) %>%
gsub("-", "_", .) %>%
tolower()
directory <- "C:/Users/worms/NGS Data/2022.06.07_drift_seq/90-666155004b/00_fastq/NNK/NNK3/counts_csv"
#directory = choose.dir()
# Get the count data
file_list <- list.files(directory)
#Keep only the data csv, trim the name a bit and then import all the csvs.
file_list <- file_list[grepl("Gen", file_list)]
run_names <- file_list %>%
gsub("Cytoplasmic-NNK-", "", .) %>%
gsub("_001_peptide3_count.csv", "", .) %>%
gsub("-", "_", .) %>%
tolower()
for (i in seq_along(file_list)) {
assign(run_names[i],
read.csv(file.path(directory, file_list[i]), header = FALSE) %>%
setNames(., c("seq", "count"))
)
}
merged_set <- data.frame()
for (i in 2:length(file_list)) {
merged_set = full_join(merged_set, get(run_names[i]), by = "seq")
}
for (i in seq_along(file_list)) {
assign(run_names[i],
read.csv(file.path(directory, file_list[i]), header = FALSE) %>%
setNames(., c("seq", "count"))
)
}
merged_set = get(run_names[1])
for (i in 2:length(file_list)) {
merged_set = full_join(merged_set, get(run_names[i]), by = "seq")
}
merged_set <- merged_set %>%
mutate_at(c(2:ncol(merged_set)),
~replace_na(.,0))
rm(list = run_names)
directory <- "C:/Users/worms/NGS Data/2022.06.07_drift_seq/90-666155004b/00_fastq/NNK/NNK3/counts_csv"
file_list <- list.files(directory)
file_list <- file_list[grepl("Gen", file_list)]
run_names <- file_list %>%
gsub("Cytoplasmic-NNK-", "", .) %>%
gsub("_001_peptide3_count.csv", "", .) %>%
gsub("-", "_", .) %>%
tolower()
for (i in seq_along(file_list)) {
assign(run_names[i],
read.csv(file.path(directory, file_list[i]), header = FALSE) %>%
setNames(., c("seq", "count"))
)
}
merged_set = get(run_names[1])
for (i in 2:length(file_list)) {
merged_set = full_join(merged_set, get(run_names[i]), by = "seq")
}
?full_join
merged_set = get(run_names[1])
for (i in 2:length(file_list)) {
merged_set = full_join(merged_set, get(run_names[i]), by = "seq", keep = TRUE)
}
for (i in seq_along(file_list)) {
assign(run_names[i],
read.csv(file.path(directory, file_list[i]), header = FALSE) %>%
setNames(., c("seq", "run_names[i]"))
)
}
for (i in seq_along(file_list)) {
assign(run_names[i],
read.csv(file.path(directory, file_list[i]), header = FALSE) %>%
setNames(., c("seq", run_names[i]))
)
}
merged_set = get(run_names[1])
for (i in 2:length(file_list)) {
merged_set = full_join(merged_set, get(run_names[i]), by = "seq")
}
rm(list = run_names)
merged_set <- merged_set %>%
mutate_at(c(2:ncol(merged_set)),
~replace_na(.,0))
?select
induced_set <- merged_set %>%
select(!contains("glu"))
repressed_set <- merged_set %>%
select(!contains("ara"))
#Load libraries needed
library(tidyverse)
library(Biostrings)
library(universalmotif)
codonAlphabet <- names(GENETIC_CODE)
codonNNK <- codonAlphabet[grep("(.)(.)[G,T]$",codonAlphabet)]
codonNNB <- codonAlphabet[grep("(.)(.)[C,G,T]$",codonAlphabet)]
library(tidyverse)  #Needed for data wrangling
library(DESeq2)  #Use for differential expression
library(bioseq) # Used to translate sequence
setwd(dir = "C:/Users/worms/Dropbox/PhD/PhD-Scripts/CyclicPeptidePipeline")
source("library_installation.R")  #Install and/or load needed libraries
source("function.R")  #Functions used in the script
# This folder should contain the CSV files with a column for sequence and a column for counts
directory <- "C:/Users/worms/NGS Data/2022.06.07_drift_seq/90-666155004b/00_fastq/NNK/NNK3/counts_csv"
file_list <- list.files(directory)
file_list <- file_list[grepl(".csv", file_list)]
run_names <- file_list %>%
gsub("Cytoplasmic-NNK-", "", .) %>%
gsub("_001_peptide3_count.csv", "", .) %>%
tolower() %>%
gsub("-", "_", .) %>%
gsub("gen_", "gen", .)
# Import the sets
merged_set <- createCountSet(directory, file_list, run_names)
induced_set <- merged_set %>%
select(!contains("glu")) %>%
filter(rowSums(.[-c(1,2)]) != 0)
# Don't need medium info anymore
colnames(induced_set) <- gsub("ara_|lb_",
"",
colnames(induced_set))
repressed_set <- merged_set %>%
select(!contains("ara")) %>%
filter(rowSums(.[-c(1,2)]) != 0)
colnames(repressed_set) <- gsub("ara_|lb_|glu_",
"",
colnames(repressed_set))
induced_set <- induced_set %>% computeRatios()
repressed_set <- repressed_set %>% computeRatios()
induced_set$enrichment_ratio %>%
summary()
repressed_set$enrichment_ratio %>%
summary()
repressed_set %>%
arrange(desc(enrichment_ratio)) %>%
head(n = 20)
induced_set$enrichment_ratio %>% hist()
enrich_motifs()
?enrich_motifs()
computeRatios <- function(df){
df <- df %>%
mutate(gen1_sum = gen1_r1 + gen1_r2) %>%
mutate(gen5_sum = gen5_r1 + gen5_r2)
df <- df %>%
mutate(gen1_ratio = gen1_sum / sum(df$gen1_sum)) %>%
mutate(gen5_ratio = gen5_sum / sum(df$gen5_sum)) %>%
mutate(enrichment_ratio = gen5_ratio / gen1_ratio)
# Drop the ratios that are infinite (where there is nothing originally) into NA
df <- df %>%
mutate(enrichment_ratio = ifelse(is.infinite(enrichment_ratio), NA, enrichment_ratio))
# Add a log version
df <- df %>%
mutate(enrichment_ratio_log = log2(enrichment_ratio))
return(df)
}
induced_set <- induced_set %>% computeRatios()
repressed_set <- repressed_set %>% computeRatios()
induced_set$enrichment_ratio_log %>% hist()
repre_set$enrichment_ratio_log %>% hist()
repressed_set$enrichment_ratio_log %>% hist()
?source
setwd(dir = "C:/Users/worms/Dropbox/PhD/PhD-Scripts/CyclicPeptidePipeline")
source("peptideAnalysis.R")
## This script aims to take counts of peptides and do analysis of them.
library(tidyverse)  #Needed for data wrangling
library(DESeq2)  #Use for differential expression
library(bioseq) # Used to translate sequence
setwd(dir = "C:/Users/worms/Dropbox/PhD/PhD-Scripts/CyclicPeptidePipeline")
source("library_installation.R")  #Install and/or load needed libraries
source("function.R")  #Functions used in the script
# This folder should contain the CSV files with a column for sequence and a column for counts
directory <- "C:/Users/worms/NGS Data/2022.06.07_drift_seq/90-666155004b/00_fastq/NNK/NNK3/counts_csv"
# Get the names of the counts .csv files
file_list <- list.files(directory)
file_list <- file_list[grepl(".csv", file_list)]
# Trim the file names to use as variable names.
run_names <- file_list %>%
gsub("Cytoplasmic-NNK-", "", .) %>%
gsub("_001_peptide3_count.csv", "", .) %>%
tolower() %>%
gsub("-", "_", .) %>%
gsub("gen_", "gen", .)
# Import the sets
merged_set <- createCountSet(directory, file_list, run_names)
# Going to split the set for induced and repressed conditions. Drop the lines containing only zeros
induced_set <- merged_set %>%
select(!contains("glu")) %>%
filter(rowSums(.[-c(1,2)]) != 0)
# Don't need medium info anymore
colnames(induced_set) <- gsub("ara_|lb_",
"",
colnames(induced_set))
repressed_set <- merged_set %>%
select(!contains("ara")) %>%
filter(rowSums(.[-c(1,2)]) != 0)
colnames(repressed_set) <- gsub("ara_|lb_|glu_",
"",
colnames(repressed_set))
## Compute sum of counts for each condition and then compute ratios of each read as a percentage of total
## compute an enrichment ratio based on the final ratio over the initial one, and removes NAs caused by divide by zero error
induced_set <- induced_set %>% computeRatios()
repressed_set <- repressed_set %>% computeRatios()
induced_set$enrichment_ratio %>%
summary()
repressed_set$enrichment_ratio %>%
summary()
# This is nice, it hints that some were highly selected. Let's look at them.
induced_set %>%
arrange(desc(enrichment_ratio)) %>%
head(n = 20)
# Really cool, look like few stop codons (good) and a common CRSX motif
induced_set_enriched <- induced_set %>%
filter(enrichment_ratio > 4)
induced_set_depleted <- induced_set %>%
filter(enrichment_ratio < 0.25)
# Let's see about the subset wdepleted
induced_set %>%
arrange(enrichment_ratio) %>%
head(n = 20)
#Really strange, they all have the same number of reads in all conditions!
induced_set %>%
arrange(enrichment_ratio) %>%
filter(enrichment_ratio > 0.62)
head(n = 20)
