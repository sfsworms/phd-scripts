on.exit(close(stream))
i = 1
ptm = proc.time()
dnaSeq <- yield(stream)
while(length(dnaSeq) > 0){
print(c(i,fileName))
print(proc.time() - ptm)
i = i+1
### Fix that
# Filter the one that are way too small (<145 bp out of 150, about 0.5% of seq for
# NNK7)
dnaSeq <- yield(stream)
dnaSeq = dnaSeq[width(dnaSeq) > 145]
# Convert to a DNAStringSet
dnaSeq = sread(dnaSeq)
# Get all the sequence that match the fwd pattern for intein
fwdDnaSeq <- dnaSeq[grepl(pattern = frontPattern, dnaSeq %>%
as.character())]
# I will subset the NNK7 and NNK7
fwdShortSeq = fwdDnaSeq[grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
as.character())]
fwdLongSeq = fwdDnaSeq[grepl(pattern = "^AAAA(.)*", fwdDnaSeq %>%
as.character())]
# And get the sequence of the peptides
fwdShortPep = extract.peptide(dnaSeq = fwdShortSeq,
regexPattern = frontPattern,
pepSize = 12)
fwdLongPep = extract.peptide(dnaSeq = fwdLongSeq,
regexPattern = frontPattern,
pepSize = 24)
# Get all the sequence that match the rev pattern for intein and take their reverse
# complement
revDnaSeq = dnaSeq[grepl(pattern = backPattern %>%
DNAString() %>%
reverseComplement(),
dnaSeq %>%
as.character())] %>%
reverseComplement()
#Remove those that do not contain fronPattern or backPattern
revDnaSeq = revDnaSeq[grepl(pattern = frontPattern, revDnaSeq %>%
as.character())]
revDnaSeq = revDnaSeq[grepl(pattern = backPattern, revDnaSeq %>%
as.character())]
# I do not have a barcode but I can get the size of the peptide by looking at the
# intein sequence anyway#Take their reverse complement: problem, we don't get
# barcode on those reads
frontPos = str_locate(revDnaSeq, frontPattern)[,2]+1
backPos = str_locate(revDnaSeq, backPattern)[,1]-1
makeSense <- frontPos < backPos #Check the back is after the front
revPeptide = subseq(x = revDnaSeq[makeSense],
start =  frontPos[makeSense],
end = backPos[makeSense])
revShortPep = revPeptide[width(revPeptide) == shortPeptideSize]
revLongPep = revPeptide[width(revPeptide) == largePeptideSize]
# I'll store all the sequence in a ShortRead object
fwdLongPep = ShortRead(sread = fwdLongPep, id = BStringSet(rep(paste(largePeptideSize,"AA peptide fw"),
length(fwdLongPep))))
revLongPep = ShortRead(sread = revLongPep, id = BStringSet(rep(paste(largePeptideSize,"AA peptide rv"),
length(revLongPep))))
longPep <- append(fwdLongPep, revLongPep)
fwdShortPep = ShortRead(sread = fwdShortPep, id = BStringSet(rep(paste(shortPeptideSize,"AA peptide fw"),
length(fwdShortPep))))
revShortPep = ShortRead(sread = revShortPep, id = BStringSet(rep(paste(shortPeptideSize,"AA peptide rv"),
length(revShortPep))))
shortPep <- append(fwdShortPep, revShortPep)
writeFasta(shortPep,
file.path(destination,
gsub(basename(fileName),
pattern = ".fastq.gz",
replacement = paste("_peptide",
shortPeptideSize,
".fa", sep=""))),
mode = "a")  # The mode append it to a file if existing
writeFasta(longPep,
file.path(destination,
gsub(basename(fileName),
pattern = ".fastq.gz",
replacement = paste("_peptide",
longPeptideSize,
".fa", sep=""))),
mode = "a")
}
}
extract.peptides.fastq <- function(fileName,
destination,
frontPattern = "TTCATTGCGAGCAAT",
backPattern = "TGTCTGTCTTACGACA",
shortPeptideSize = 12,
largePeptideSize = 24
) {
# Load a fastQ.gz file with the peptides. The files are too big to be used
# entirely, so I'll have to use FastqStremer. .gz compressed files actually process faster than .fastq files.
# I first need to get a connection established.
# open the connection
stream <- FastqStreamer(fileName)
on.exit(close(stream))
i = 1
ptm = proc.time()
dnaSeq <- yield(stream)
while(length(dnaSeq) > 0){
print(c(i,fileName))
print(proc.time() - ptm)
i = i+1
### Fix that
# Filter the one that are way too small (<145 bp out of 150, about 0.5% of seq for
# NNK7)
dnaSeq <- yield(stream)
dnaSeq = dnaSeq[width(dnaSeq) > 145]
# Convert to a DNAStringSet
dnaSeq = sread(dnaSeq)
# Get all the sequence that match the fwd pattern for intein
fwdDnaSeq <- dnaSeq[grepl(pattern = frontPattern, dnaSeq %>%
as.character())]
# I will subset the NNK7 and NNK7
fwdShortSeq = fwdDnaSeq[grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
as.character())]
fwdLongSeq = fwdDnaSeq[grepl(pattern = "^AAAA(.)*", fwdDnaSeq %>%
as.character())]
# And get the sequence of the peptides
fwdShortPep = extract.peptide(dnaSeq = fwdShortSeq,
regexPattern = frontPattern,
pepSize = 12)
fwdLongPep = extract.peptide(dnaSeq = fwdLongSeq,
regexPattern = frontPattern,
pepSize = 24)
# Get all the sequence that match the rev pattern for intein and take their reverse
# complement
revDnaSeq = dnaSeq[grepl(pattern = backPattern %>%
DNAString() %>%
reverseComplement(),
dnaSeq %>%
as.character())] %>%
reverseComplement()
#Remove those that do not contain fronPattern or backPattern
revDnaSeq = revDnaSeq[grepl(pattern = frontPattern, revDnaSeq %>%
as.character())]
revDnaSeq = revDnaSeq[grepl(pattern = backPattern, revDnaSeq %>%
as.character())]
# I do not have a barcode but I can get the size of the peptide by looking at the
# intein sequence anyway#Take their reverse complement: problem, we don't get
# barcode on those reads
frontPos = str_locate(revDnaSeq, frontPattern)[,2]+1
backPos = str_locate(revDnaSeq, backPattern)[,1]-1
makeSense <- frontPos < backPos #Check the back is after the front
revPeptide = subseq(x = revDnaSeq[makeSense],
start =  frontPos[makeSense],
end = backPos[makeSense])
revShortPep = revPeptide[width(revPeptide) == shortPeptideSize]
revLongPep = revPeptide[width(revPeptide) == largePeptideSize]
# I'll store all the sequence in a ShortRead object
fwdLongPep = ShortRead(sread = fwdLongPep, id = BStringSet(rep(paste(largePeptideSize,"AA peptide fw"),
length(fwdLongPep))))
revLongPep = ShortRead(sread = revLongPep, id = BStringSet(rep(paste(largePeptideSize,"AA peptide rv"),
length(revLongPep))))
longPep <- append(fwdLongPep, revLongPep)
fwdShortPep = ShortRead(sread = fwdShortPep, id = BStringSet(rep(paste(shortPeptideSize,"AA peptide fw"),
length(fwdShortPep))))
revShortPep = ShortRead(sread = revShortPep, id = BStringSet(rep(paste(shortPeptideSize,"AA peptide rv"),
length(revShortPep))))
shortPep <- append(fwdShortPep, revShortPep)
writeFasta(shortPep,
file.path(destination,
gsub(basename(fileName),
pattern = ".fastq.gz",
replacement = paste("_peptide",
shortPeptideSize,
".fa", sep=""))),
mode = "a")  # The mode append it to a file if existing
writeFasta(longPep,
file.path(destination,
gsub(basename(fileName),
pattern = ".fastq.gz",
replacement = paste("_peptide",
longPeptideSize,
".fa", sep=""))),
mode = "a")
}
}
for(i in seq_along(fileList)){ #Run the extraction script on all the fastq NNK files
extract.peptides.fastq(fileName = file.path(directory,fileList[i]), destination = file.path(directory,"peptide_sequence"))
}
seq_along(fileList)
directory <- "D:/2022.06.07_drift_seq/90-666155004b"
#Get a list of the NNK .fastq files
fileList <- list.files(directory) %>%  #Get files from directory
grep(pattern = ".fastq.gz$", ., value = TRUE) #only the .Fastq
directory <- "D:\2022.06.07_drift_seq\90-666155004b\00_fastq\NNK"
#Get a list of the NNK .fastq files
fileList <- list.files(directory) %>%  #Get files from directory
grep(pattern = ".fastq.gz$", ., value = TRUE) #only the .Fastq
list.files(directory)
directory <- "D:\2022.06.07_drift_seq\90-666155004b\00_fastq\NNK"
directory <- "D:/2022.06.07_drift_seq/90-666155004b/00_fastq/NNK"
#Get a list of the NNK .fastq files
fileList <- list.files(directory) %>%  #Get files from directory
grep(pattern = ".fastq.gz$", ., value = TRUE) #only the .Fastq
destination <- file.path("D:/2022.06.07_drift_seq/90-666155004b/00_fastq/NNK/NNK7") #Set where to put the fasta with peptides files.
for(i in seq_along(fileList)){ #Run the extraction script on all the fastq NNK files
extract.peptides.fastq(fileName = file.path(directory,fileList[i]), destination = file.path(directory,"peptide_sequence"))
}
frontPattern = "TTCATTGCGAGCAAT",
frontPattern = "TTCATTGCGAGCAAT"
backPattern = "TGTCTGTCTTACGACA"
shortPeptideSize = 12
largePeptideSize = 24
fileName = fileL
fileName = fileList[1]
destination <- file.path("D:/2022.06.07_drift_seq/90-666155004b/00_fastq/NNK/NNK7") #Set where to put the fasta with peptides files.
# I first need to get a connection established.
# open the connection
stream <- FastqStreamer(fileName)
fileName = file.path(directory,fileList[1]
)
# I first need to get a connection established.
# open the connection
stream <- FastqStreamer(fileName)
on.exit(close(stream))
i = 1
ptm = proc.time()
dnaSeq <- yield(stream)
while(length(dnaSeq) > 0){
print(c(i,fileName))
print(proc.time() - ptm)
i = i+1
### Fix that
# Filter the one that are way too small (<145 bp out of 150, about 0.5% of seq for
# NNK7)
dnaSeq <- yield(stream)
dnaSeq = dnaSeq[width(dnaSeq) > 145]
# Convert to a DNAStringSet
dnaSeq = sread(dnaSeq)
# Get all the sequence that match the fwd pattern for intein
fwdDnaSeq <- dnaSeq[grepl(pattern = frontPattern, dnaSeq %>%
as.character())]
# I will subset the NNK7 and NNK7
fwdShortSeq = fwdDnaSeq[grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
as.character())]
fwdLongSeq = fwdDnaSeq[grepl(pattern = "^AAAA(.)*", fwdDnaSeq %>%
as.character())]
# And get the sequence of the peptides
fwdShortPep = extract.peptide(dnaSeq = fwdShortSeq,
regexPattern = frontPattern,
pepSize = 12)
fwdLongPep = extract.peptide(dnaSeq = fwdLongSeq,
regexPattern = frontPattern,
pepSize = 24)
# Get all the sequence that match the rev pattern for intein and take their reverse
# complement
revDnaSeq = dnaSeq[grepl(pattern = backPattern %>%
DNAString() %>%
reverseComplement(),
dnaSeq %>%
as.character())] %>%
reverseComplement()
#Remove those that do not contain fronPattern or backPattern
revDnaSeq = revDnaSeq[grepl(pattern = frontPattern, revDnaSeq %>%
as.character())]
revDnaSeq = revDnaSeq[grepl(pattern = backPattern, revDnaSeq %>%
as.character())]
# I do not have a barcode but I can get the size of the peptide by looking at the
# intein sequence anyway#Take their reverse complement: problem, we don't get
# barcode on those reads
frontPos = str_locate(revDnaSeq, frontPattern)[,2]+1
backPos = str_locate(revDnaSeq, backPattern)[,1]-1
makeSense <- frontPos < backPos #Check the back is after the front
revPeptide = subseq(x = revDnaSeq[makeSense],
start =  frontPos[makeSense],
end = backPos[makeSense])
revShortPep = revPeptide[width(revPeptide) == shortPeptideSize]
revLongPep = revPeptide[width(revPeptide) == largePeptideSize]
# I'll store all the sequence in a ShortRead object
fwdLongPep = ShortRead(sread = fwdLongPep, id = BStringSet(rep(paste(largePeptideSize,"AA peptide fw"),
length(fwdLongPep))))
revLongPep = ShortRead(sread = revLongPep, id = BStringSet(rep(paste(largePeptideSize,"AA peptide rv"),
length(revLongPep))))
longPep <- append(fwdLongPep, revLongPep)
fwdShortPep = ShortRead(sread = fwdShortPep, id = BStringSet(rep(paste(shortPeptideSize,"AA peptide fw"),
length(fwdShortPep))))
revShortPep = ShortRead(sread = revShortPep, id = BStringSet(rep(paste(shortPeptideSize,"AA peptide rv"),
length(revShortPep))))
shortPep <- append(fwdShortPep, revShortPep)
writeFasta(shortPep,
file.path(destination,
gsub(basename(fileName),
pattern = ".fastq.gz",
replacement = paste("_peptide",
shortPeptideSize,
".fa", sep=""))),
mode = "a")  # The mode append it to a file if existing
writeFasta(longPep,
file.path(destination,
gsub(basename(fileName),
pattern = ".fastq.gz",
replacement = paste("_peptide",
longPeptideSize,
".fa", sep=""))),
mode = "a")
}
while(length(dnaSeq) > 0){
print(c(i,fileName))
print(proc.time() - ptm)
i = i+1
### Fix that
# Filter the one that are way too small (<145 bp out of 150, about 0.5% of seq for
# NNK7)
dnaSeq <- yield(stream)
dnaSeq = dnaSeq[width(dnaSeq) > 145]
# Convert to a DNAStringSet
dnaSeq = sread(dnaSeq)
# Get all the sequence that match the fwd pattern for intein
fwdDnaSeq <- dnaSeq[grepl(pattern = frontPattern, dnaSeq %>%
as.character())]
# I will subset the NNK7 and NNK7
fwdShortSeq = fwdDnaSeq[grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
as.character())]
fwdLongSeq = fwdDnaSeq[grepl(pattern = "^AAAA(.)*", fwdDnaSeq %>%
as.character())]
# And get the sequence of the peptides
fwdShortPep = extract.peptide(dnaSeq = fwdShortSeq,
regexPattern = frontPattern,
pepSize = 12)
fwdLongPep = extract.peptide(dnaSeq = fwdLongSeq,
regexPattern = frontPattern,
pepSize = 24)
# Get all the sequence that match the rev pattern for intein and take their reverse
# complement
revDnaSeq = dnaSeq[grepl(pattern = backPattern %>%
DNAString() %>%
reverseComplement(),
dnaSeq %>%
as.character())] %>%
reverseComplement()
#Remove those that do not contain fronPattern or backPattern
revDnaSeq = revDnaSeq[grepl(pattern = frontPattern, revDnaSeq %>%
as.character())]
revDnaSeq = revDnaSeq[grepl(pattern = backPattern, revDnaSeq %>%
as.character())]
# I do not have a barcode but I can get the size of the peptide by looking at the
# intein sequence anyway#Take their reverse complement: problem, we don't get
# barcode on those reads
frontPos = str_locate(revDnaSeq, frontPattern)[,2]+1
backPos = str_locate(revDnaSeq, backPattern)[,1]-1
makeSense <- frontPos < backPos #Check the back is after the front
revPeptide = subseq(x = revDnaSeq[makeSense],
start =  frontPos[makeSense],
end = backPos[makeSense])
revShortPep = revPeptide[width(revPeptide) == shortPeptideSize]
revLongPep = revPeptide[width(revPeptide) == largePeptideSize]
# I'll store all the sequence in a ShortRead object
fwdLongPep = ShortRead(sread = fwdLongPep, id = BStringSet(rep(paste(largePeptideSize,"AA peptide fw"),
length(fwdLongPep))))
revLongPep = ShortRead(sread = revLongPep, id = BStringSet(rep(paste(largePeptideSize,"AA peptide rv"),
length(revLongPep))))
longPep <- append(fwdLongPep, revLongPep)
fwdShortPep = ShortRead(sread = fwdShortPep, id = BStringSet(rep(paste(shortPeptideSize,"AA peptide fw"),
length(fwdShortPep))))
revShortPep = ShortRead(sread = revShortPep, id = BStringSet(rep(paste(shortPeptideSize,"AA peptide rv"),
length(revShortPep))))
shortPep <- append(fwdShortPep, revShortPep)
writeFasta(shortPep,
file.path(destination,
gsub(basename(fileName),
pattern = ".fastq.gz",
replacement = paste("_peptide",
shortPeptideSize,
".fa", sep=""))),
mode = "a")  # The mode append it to a file if existing
writeFasta(longPep,
file.path(destination,
gsub(basename(fileName),
pattern = ".fastq.gz",
replacement = paste("_peptide",
largePeptideSize,
".fa", sep=""))),
mode = "a")
}
for(i in seq_along(fileList)){ #Run the extraction script on all the fastq NNK files
extract.peptides.fastq(fileName = file.path(directory,fileList[i]), destination = file.path(directory,"peptide_sequence"))
}
destination <- file.path("D:/2022.06.07_drift_seq/90-666155004b/00_fastq/NNK/NNK7") #Set where to put the fasta with peptides files.
extract.peptides.fastq <- function(fileName,
destination,
frontPattern = "TTCATTGCGAGCAAT",
backPattern = "TGTCTGTCTTACGACA",
shortPeptideSize = 12,
largePeptideSize = 24
) {
# Load a fastQ.gz file with the peptides. The files are too big to be used
# entirely, so I'll have to use FastqStremer. .gz compressed files actually process faster than .fastq files.
# I first need to get a connection established.
# open the connection
stream <- FastqStreamer(fileName)
on.exit(close(stream))
i = 1
ptm = proc.time()
dnaSeq <- yield(stream)
while(length(dnaSeq) > 0){
print(c(i,fileName))
print(proc.time() - ptm)
i = i+1
### Fix that
# Filter the one that are way too small (<145 bp out of 150, about 0.5% of seq for
# NNK7)
dnaSeq <- yield(stream)
dnaSeq = dnaSeq[width(dnaSeq) > 145]
# Convert to a DNAStringSet
dnaSeq = sread(dnaSeq)
# Get all the sequence that match the fwd pattern for intein
fwdDnaSeq <- dnaSeq[grepl(pattern = frontPattern, dnaSeq %>%
as.character())]
# I will subset the NNK7 and NNK7
fwdShortSeq = fwdDnaSeq[grepl(pattern = "^TGCA(.)*", fwdDnaSeq %>%
as.character())]
fwdLongSeq = fwdDnaSeq[grepl(pattern = "^AAAA(.)*", fwdDnaSeq %>%
as.character())]
# And get the sequence of the peptides
fwdShortPep = extract.peptide(dnaSeq = fwdShortSeq,
regexPattern = frontPattern,
pepSize = 12)
fwdLongPep = extract.peptide(dnaSeq = fwdLongSeq,
regexPattern = frontPattern,
pepSize = 24)
# Get all the sequence that match the rev pattern for intein and take their reverse
# complement
revDnaSeq = dnaSeq[grepl(pattern = backPattern %>%
DNAString() %>%
reverseComplement(),
dnaSeq %>%
as.character())] %>%
reverseComplement()
#Remove those that do not contain fronPattern or backPattern
revDnaSeq = revDnaSeq[grepl(pattern = frontPattern, revDnaSeq %>%
as.character())]
revDnaSeq = revDnaSeq[grepl(pattern = backPattern, revDnaSeq %>%
as.character())]
# I do not have a barcode but I can get the size of the peptide by looking at the
# intein sequence anyway#Take their reverse complement: problem, we don't get
# barcode on those reads
frontPos = str_locate(revDnaSeq, frontPattern)[,2]+1
backPos = str_locate(revDnaSeq, backPattern)[,1]-1
makeSense <- frontPos < backPos #Check the back is after the front
revPeptide = subseq(x = revDnaSeq[makeSense],
start =  frontPos[makeSense],
end = backPos[makeSense])
revShortPep = revPeptide[width(revPeptide) == shortPeptideSize]
revLongPep = revPeptide[width(revPeptide) == largePeptideSize]
# I'll store all the sequence in a ShortRead object
fwdLongPep = ShortRead(sread = fwdLongPep, id = BStringSet(rep(paste(largePeptideSize,"AA peptide fw"),
length(fwdLongPep))))
revLongPep = ShortRead(sread = revLongPep, id = BStringSet(rep(paste(largePeptideSize,"AA peptide rv"),
length(revLongPep))))
longPep <- append(fwdLongPep, revLongPep)
fwdShortPep = ShortRead(sread = fwdShortPep, id = BStringSet(rep(paste(shortPeptideSize,"AA peptide fw"),
length(fwdShortPep))))
revShortPep = ShortRead(sread = revShortPep, id = BStringSet(rep(paste(shortPeptideSize,"AA peptide rv"),
length(revShortPep))))
shortPep <- append(fwdShortPep, revShortPep)
writeFasta(shortPep,
file.path(destination,
gsub(basename(fileName),
pattern = ".fastq.gz",
replacement = paste("_peptide",
shortPeptideSize,
".fa", sep=""))),
mode = "a")  # The mode append it to a file if existing
writeFasta(longPep,
file.path(destination,
gsub(basename(fileName),
pattern = ".fastq.gz",
replacement = paste("_peptide",
largePeptideSize,
".fa", sep=""))),
mode = "a")
}
}
for(i in seq_along(fileList)){ #Run the extraction script on all the fastq NNK files
extract.peptides.fastq(fileName = file.path(directory,fileList[i]), destination = file.path(destination,"peptide_sequence"))
}
for(i in seq_along(fileList)){ #Run the extraction script on all the fastq NNK files
extract.peptides.fastq(fileName = file.path(directory,fileList[i]), destination = file.path(destination,"peptide_sequence"))
}
?subseq
?subseq
?yield
directory <- "D:/2022.06.07_drift_seq/90-666155004b/00_fastq/NNK"
#Get a list of the NNK .fastq files
fileList <- list.files(directory) %>%  #Get files from directory
grep(pattern = ".fastq.gz$", ., value = TRUE) #only the .Fastq
destination <- file.path("D:/2022.06.07_drift_seq/90-666155004b/00_fastq/NNK/NNK7") #Set where to put the fasta with peptides files.
for(i in seq_along(fileList)){ #Run the extraction script on all the fastq NNK files
extract.peptides.fastq(fileName = file.path(directory,fileList[i]), destination = file.path(destination,"peptide_sequence"))
}
source("function.R")  #Functions used in the script
source("function.R")  #Functions used in the script
directory <- "D:/2022.06.07_drift_seq/90-666155004b/00_fastq/NNK"
#Get a list of the NNK .fastq files
fileList <- list.files(directory) %>%  #Get files from directory
grep(pattern = ".fastq.gz$", ., value = TRUE) #only the .Fastq
destination <- file.path("D:/2022.06.07_drift_seq/90-666155004b/00_fastq/NNK/NNK7") #Set where to put the fasta with peptides files.
for(i in seq_along(fileList)){ #Run the extraction script on all the fastq NNK files
extract.peptides.fastq(fileName = file.path(directory,fileList[i]), destination = file.path(destination,"peptide_sequence"))
}
source("function.R")  #Functions used in the script
# Directory store the directory with all the files.
directory <- "D:/2022.06.07_drift_seq/90-666155004b/00_fastq/NNK"
#Get a list of the NNK .fastq files
fileList <- list.files(directory) %>%  #Get files from directory
grep(pattern = ".fastq.gz$", ., value = TRUE) #only the .Fastq
destination <- file.path("D:/2022.06.07_drift_seq/90-666155004b/00_fastq/NNK/NNK7") #Set where to put the fasta with peptides files.
for(i in seq_along(fileList)){ #Run the extraction script on all the fastq NNK files
extract.peptides.fastq(fileName = file.path(directory,fileList[i]), destination = file.path(destination,"peptide_sequence"))
}
